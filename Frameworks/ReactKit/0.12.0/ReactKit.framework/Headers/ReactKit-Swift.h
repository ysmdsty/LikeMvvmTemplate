// Generated by Apple Swift version 2.1 (swiftlang-700.1.101.6 clang-700.1.76)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
#endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class NSMutableArray;


/// Array-wrapper class to create mutableArrayValueForKey-proxy and its stream.
///
/// (NOTE: to forward changes to original array, use <code>ForwardingDynamicArray
/// </code> instead)
SWIFT_CLASS("_TtC8ReactKit12DynamicArray")
@interface DynamicArray : NSObject

/// original array
@property (nonatomic, readonly, copy) NSArray * __nonnull _array;

/// Proxy array to send changes to self.stream.
///
/// NOTE: Make sure to bind <code>self.stream
/// </code> first i.e. <code>self.stream ~> { ... }
/// </code> (KVO-addObserver) before using this.
@property (nonatomic, readonly, strong) NSMutableArray * __nonnull proxy;
- (nonnull instancetype)init:(NSArray * __nonnull)array OBJC_DESIGNATED_INITIALIZER;
@end



/// DynamicArray + forwarding changes to original array (either "KVC-compliant model's array" or "raw NSMutableArray")
///
/// e.g.
///
/// <code>let dynamicArray = ForwardingDynamicArray(object: myObj, keyPath: "array")
/// dynamicArray.proxy.addObject(newItem)
/// 
/// </code>
/// will also add <code>newItem
/// </code> to <code>myObj.array
/// </code>, even when this array is NSArray (thanks to KVC magic).
SWIFT_CLASS("_TtC8ReactKit22ForwardingDynamicArray")
@interface ForwardingDynamicArray : DynamicArray

/// Initializer for forwarding changes to KVC-compliant model's array (accessible via object.valueForKeyPath(keyPath)).
///
/// \param object Model object to call <code>mutableArrayValueForKeyPath()
/// </code> as its receiver.
///
/// \param keyPath Argument for <code>mutableArrayValueForKeyPath()
/// </code>.
- (nonnull instancetype)initWithObject:(NSObject * __nonnull)object keyPath:(NSString * __nonnull)keyPath;

/// Initializer for forwarding changes directly to raw NSMutableArray.
///
/// \param original Original NSMutableArray. (DO NOT SET NSMutableArray which is created via <em>mutableArrayValueForKey()</em>).
- (nonnull instancetype)initWithOriginal:(NSMutableArray * __nonnull)originalMutableArray;
- (nonnull instancetype)initWithOriginal:(NSMutableArray * __nonnull)originalMutableArray forwardingStreamOwner:(NSObject * __nonnull)forwardingStreamOwner OBJC_DESIGNATED_INITIALIZER;
@end


@interface NSIndexSet (SWIFT_EXTENSION(ReactKit))
@end


@interface NSNotificationCenter (SWIFT_EXTENSION(ReactKit))
@end


@interface NSObject (SWIFT_EXTENSION(ReactKit))
@end


@interface NSObject (SWIFT_EXTENSION(ReactKit))
@property (nonatomic, copy) NSArray * __nonnull _owninigStreams;
@end


@interface NSObject (SWIFT_EXTENSION(ReactKit))
@end


@interface NSTimer (SWIFT_EXTENSION(ReactKit))
@end


@interface UIBarButtonItem (SWIFT_EXTENSION(ReactKit))
@end


@interface UIButton (SWIFT_EXTENSION(ReactKit))
@end


@interface UIControl (SWIFT_EXTENSION(ReactKit))
@end


@interface UIGestureRecognizer (SWIFT_EXTENSION(ReactKit))
@end


@interface UITextField (SWIFT_EXTENSION(ReactKit))
@end


@interface UITextView (SWIFT_EXTENSION(ReactKit))
@end


SWIFT_CLASS("_TtC8ReactKit9_KVOProxy")
@interface _KVOProxy : NSObject
@property (nonatomic, readonly, strong) NSObject * __nonnull _target;
@property (nonatomic, readonly, copy) NSString * __nonnull _keyPath;
@property (nonatomic, readonly, copy) void (^ __nonnull _handler)(id __nullable, NSKeyValueChange, NSIndexSet * __nullable);
@property (nonatomic) BOOL _isObserving;
- (nonnull instancetype)initWithTarget:(NSObject * __nonnull)target keyPath:(NSString * __nonnull)keyPath handler:(void (^ __nonnull)(id __nullable, NSKeyValueChange, NSIndexSet * __nullable))handler OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (void)observeValueForKeyPath:(NSString * __nullable)keyPath ofObject:(id __nullable)object change:(NSDictionary<NSString *, id> * __nullable)change context:(void * __null_unspecified)context;
@end

#pragma clang diagnostic pop
